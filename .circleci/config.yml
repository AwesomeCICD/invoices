version: 2.1
executors:
  rust-grpc-protoc:
    docker:
      - image: externalreality/invoices-build-image
  debian-rabbitmq:
    docker:
      # base image to run services
      - image: debian
      # rabbitmq message broker
      - image: rabbitmq:3.7-alpine
jobs:
  grpc_protocol:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - run:
          name: Build GRPC Protobuf Protocols
          command: cargo build -p grpc_protocol
      - persist_to_workspace:
          root: ./grpc_protocol
          paths:
            - src
      - gen-cache-key-vars
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: &cargo-cache-key v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-{{checksum "Cargo.lock"}}

  analysis_server:
    executor: rust-grpc-protoc
    steps:
      - build-service:
          display_name: Analysis Server
          package_name: analysis_server

  invoice_server:
    executor: rust-grpc-protoc
    steps:
      - build-service:
          display_name: Invoice Server
          package_name: invoice_server

  rating_server:
    executor: rust-grpc-protoc
    steps:
      - build-service:
          display_name: Rating Server
          package_name: rating_server
  
  invoice_cli:
    executor: rust-grpc-protoc
    steps:
      - build-service:
          display_name: Invoice CLI
          package_name: invoice_cli
  
  integration_tests:
    executor: debian-rabbitmq
    steps:
      - run:
          name: Test Service Integrations
          command: echo "Service TESTS PASSED"

  acceptance_tests:
    executor: debian-rabbitmq
    steps:
      - run:
          name: Test CLI
          command: echo "CLI TESTS PASSED"
  
  deploy_ms_store:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy to MS Store
          command: echo "Deploy"
     
  deploy_debian:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy to MS Store
          command: echo "Deploy"
    
  deploy_rpm:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy to MS Store
          command: echo "Deploy"
  
  deploy_apple_store:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy to MS Store
          command: echo "Deploy"

workflows:
  version: 2.1
  build:
    jobs:
      - grpc_protocol
      - analysis_server:
          requires:
            - grpc_protocol
      - invoice_server:
          requires:
            - grpc_protocol
      - rating_server:
          requires:
            - grpc_protocol
      - invoice_cli:
          requires:
            - grpc_protocol
      - integration_tests:
          requires:
            - analysis_server
            - invoice_server
            - rating_server
            - invoice_cli
      - acceptance_tests:
          requires:
            - integration_tests
      - deploy_ms_store:
          requires:
            - acceptance_tests
      - deploy_debian:
          requires:
            - acceptance_tests
      - deploy_rpm:
          requires:
            - acceptance_tests
      - deploy_apple_store:
          requires:
            - acceptance_tests
commands:
  gen-cache-key-vars:
    description: "Generate cache key files"
    steps:
      - run:
          name: Calculate Cache Key Vars
          command: rustc --version >rust-version

  build-service:
    description: "Boilerplate Rust service build config"
    parameters:
      display_name:
        type: string
      package_name:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ./grpc_protocol
      - gen-cache-key-vars
      - restore_cache:
          keys:
            - *cargo-cache-key
      - run:
          name: Check << parameters.display_name >>
          command: cargo check -p << parameters.package_name >>
      - run:
          name: Build << parameters.display_name >>
          command: cargo build -p << parameters.package_name >>
      - run:
          name: Test << parameters.display_name >>
          command: cargo test -p << parameters.package_name >>
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: *cargo-cache-key
