version: 2.1

orbs:
   multirepo: dnephin/multirepo@0.0.7
   aws-ecr: circleci/aws-ecr@6.7.0
executors:
  rust-grpc-protoc:
    docker:
      - image: externalreality/invoices-build-image

jobs:
  grpc_protocol:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - run:
          name: Get Tools
          command: apt update && apt install git -yy
      - multirepo/run-job-for-paths:
          paths: "project/grpc_protocol"
      - run:
          name: Build GRPC Protobuf Protocols
          command: |
            cargo build -p grpc_protocol
      - persist_to_workspace:
          root: ./grpc_protocol
          paths:
            - src
      - gen-cache-key-vars
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: &cargo-cache-key v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-{{checksum "Cargo.lock"}}

  analysis_server:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - run:
          name: Get Git
          command: apt update && apt install git -yy
      - multirepo/run-job-for-paths:
          paths: project/grpc_protocol project/analysis_server
      - build-service:
          display_name: Analysis Server
          package_name: analysis_server

  invoice_server:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - build-service:
          display_name: Invoice Server
          package_name: invoice_server

  rating_server:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - build-service:
          display_name: Rating Server
          package_name: rating_server

  invoice_cli:
    executor: rust-grpc-protoc
    steps:
      - checkout
      - build-service:
          display_name: Invoice CLI
          package_name: invoice_cli

  deploy_from_behind_firewall:
    machine: true
    resource_class: AwesomeCICD/ecr_t3_medium
    steps:
      - checkout
      - run: echo "HELLO BAA"
      - run: sudo apt install python-pip -y
      - run: git clone git@github.com:ExternalReality/somedockerfile.git dockerfiles
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          region: AWS_REGION
          repo: testrepo
          path: dockerfiles

workflows:
  build:
    jobs:
      - grpc_protocol:
        filters:
          branches:
            ignore: master
      - analysis_server:
          requires:
            - grpc_protocol
      - invoice_server:
          requires:
            - grpc_protocol
      - rating_server:
          requires:
            - grpc_protocol
      - invoice_cli:
          requires:
            - grpc_protocol
      - deploy_from_behind_firewall:
          requires:
            - analysis_server
            - rating_server
            - invoice_server

commands:
  gen-cache-key-vars:
    description: "Generate cache key files"
    steps:
      - run:
          name: Calculate Cache Key Vars
          command: rustc --version >rust-version

  build-service:
    description: "Boilerplate Rust service build config"
    parameters:
      display_name:
        type: string
      package_name:
        type: string
    steps:
      - attach_workspace:
          at: ./grpc_protocol
      - gen-cache-key-vars
      - restore_cache:
          keys:
            - *cargo-cache-key
      - run:
          name: Check << parameters.display_name >>
          command: cargo check -p << parameters.package_name >>
      - run:
          name: Build << parameters.display_name >>
          command: cargo build -p << parameters.package_name >>
      - run:
          name: Test << parameters.display_name >>
          command: cargo test -p << parameters.package_name >>
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: *cargo-cache-key
