// This file is generated by rust-protobuf 2.6.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

use serde::{Serialize, Deserialize};

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Address {
    // message fields
    pub city: ::std::string::String,
    pub street: ::std::string::String,
    pub zip: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Address {
    fn default() -> &'a Address {
        <Address as ::protobuf::Message>::default_instance()
    }
}

impl Address {
    pub fn new() -> Address {
        ::std::default::Default::default()
    }

    // string city = 1;


    pub fn get_city(&self) -> &str {
        &self.city
    }
    pub fn clear_city(&mut self) {
        self.city.clear();
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        &mut self.city
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.city, ::std::string::String::new())
    }

    // string street = 2;


    pub fn get_street(&self) -> &str {
        &self.street
    }
    pub fn clear_street(&mut self) {
        self.street.clear();
    }

    // Param is passed by value, moved
    pub fn set_street(&mut self, v: ::std::string::String) {
        self.street = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_street(&mut self) -> &mut ::std::string::String {
        &mut self.street
    }

    // Take field
    pub fn take_street(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.street, ::std::string::String::new())
    }

    // string zip = 3;


    pub fn get_zip(&self) -> &str {
        &self.zip
    }
    pub fn clear_zip(&mut self) {
        self.zip.clear();
    }

    // Param is passed by value, moved
    pub fn set_zip(&mut self, v: ::std::string::String) {
        self.zip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_zip(&mut self) -> &mut ::std::string::String {
        &mut self.zip
    }

    // Take field
    pub fn take_zip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.zip, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Address {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.city)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.street)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.zip)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.city.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.city);
        }
        if !self.street.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.street);
        }
        if !self.zip.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.zip);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.city.is_empty() {
            os.write_string(1, &self.city)?;
        }
        if !self.street.is_empty() {
            os.write_string(2, &self.street)?;
        }
        if !self.zip.is_empty() {
            os.write_string(3, &self.zip)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Address {
        Address::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "city",
                    |m: &Address| { &m.city },
                    |m: &mut Address| { &mut m.city },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "street",
                    |m: &Address| { &m.street },
                    |m: &mut Address| { &mut m.street },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "zip",
                    |m: &Address| { &m.zip },
                    |m: &mut Address| { &mut m.zip },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Address>(
                    "Address",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Address {
        static mut instance: ::protobuf::lazy::Lazy<Address> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Address,
        };
        unsafe {
            instance.get(Address::new)
        }
    }
}

impl ::protobuf::Clear for Address {
    fn clear(&mut self) {
        self.city.clear();
        self.street.clear();
        self.zip.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Address {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Invoice {
    // message fields
    pub timestamp: ::std::string::String,
    pub bill_to: ::protobuf::SingularPtrField<Address>,
    pub company_name: ::std::string::String,
    pub addres: ::protobuf::SingularPtrField<Address>,
    pub phone: ::std::string::String,
    pub email: ::std::string::String,
    pub total_price: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Invoice {
    fn default() -> &'a Invoice {
        <Invoice as ::protobuf::Message>::default_instance()
    }
}

impl Invoice {
    pub fn new() -> Invoice {
        ::std::default::Default::default()
    }

    // string timestamp = 1;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }

    // .Address bill_to = 2;


    pub fn get_bill_to(&self) -> &Address {
        self.bill_to.as_ref().unwrap_or_else(|| Address::default_instance())
    }
    pub fn clear_bill_to(&mut self) {
        self.bill_to.clear();
    }

    pub fn has_bill_to(&self) -> bool {
        self.bill_to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bill_to(&mut self, v: Address) {
        self.bill_to = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bill_to(&mut self) -> &mut Address {
        if self.bill_to.is_none() {
            self.bill_to.set_default();
        }
        self.bill_to.as_mut().unwrap()
    }

    // Take field
    pub fn take_bill_to(&mut self) -> Address {
        self.bill_to.take().unwrap_or_else(|| Address::new())
    }

    // string company_name = 3;


    pub fn get_company_name(&self) -> &str {
        &self.company_name
    }
    pub fn clear_company_name(&mut self) {
        self.company_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_company_name(&mut self, v: ::std::string::String) {
        self.company_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_company_name(&mut self) -> &mut ::std::string::String {
        &mut self.company_name
    }

    // Take field
    pub fn take_company_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.company_name, ::std::string::String::new())
    }

    // .Address addres = 4;


    pub fn get_addres(&self) -> &Address {
        self.addres.as_ref().unwrap_or_else(|| Address::default_instance())
    }
    pub fn clear_addres(&mut self) {
        self.addres.clear();
    }

    pub fn has_addres(&self) -> bool {
        self.addres.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addres(&mut self, v: Address) {
        self.addres = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addres(&mut self) -> &mut Address {
        if self.addres.is_none() {
            self.addres.set_default();
        }
        self.addres.as_mut().unwrap()
    }

    // Take field
    pub fn take_addres(&mut self) -> Address {
        self.addres.take().unwrap_or_else(|| Address::new())
    }

    // string phone = 5;


    pub fn get_phone(&self) -> &str {
        &self.phone
    }
    pub fn clear_phone(&mut self) {
        self.phone.clear();
    }

    // Param is passed by value, moved
    pub fn set_phone(&mut self, v: ::std::string::String) {
        self.phone = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phone(&mut self) -> &mut ::std::string::String {
        &mut self.phone
    }

    // Take field
    pub fn take_phone(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.phone, ::std::string::String::new())
    }

    // string email = 6;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // double total_price = 7;


    pub fn get_total_price(&self) -> f64 {
        self.total_price
    }
    pub fn clear_total_price(&mut self) {
        self.total_price = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_price(&mut self, v: f64) {
        self.total_price = v;
    }
}

impl ::protobuf::Message for Invoice {
    fn is_initialized(&self) -> bool {
        for v in &self.bill_to {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.addres {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bill_to)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.company_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addres)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.phone)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_price = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.timestamp);
        }
        if let Some(ref v) = self.bill_to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.company_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.company_name);
        }
        if let Some(ref v) = self.addres.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.phone.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.phone);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.email);
        }
        if self.total_price != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.timestamp.is_empty() {
            os.write_string(1, &self.timestamp)?;
        }
        if let Some(ref v) = self.bill_to.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.company_name.is_empty() {
            os.write_string(3, &self.company_name)?;
        }
        if let Some(ref v) = self.addres.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.phone.is_empty() {
            os.write_string(5, &self.phone)?;
        }
        if !self.email.is_empty() {
            os.write_string(6, &self.email)?;
        }
        if self.total_price != 0. {
            os.write_double(7, self.total_price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Invoice {
        Invoice::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "timestamp",
                    |m: &Invoice| { &m.timestamp },
                    |m: &mut Invoice| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "bill_to",
                    |m: &Invoice| { &m.bill_to },
                    |m: &mut Invoice| { &mut m.bill_to },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "company_name",
                    |m: &Invoice| { &m.company_name },
                    |m: &mut Invoice| { &mut m.company_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "addres",
                    |m: &Invoice| { &m.addres },
                    |m: &mut Invoice| { &mut m.addres },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "phone",
                    |m: &Invoice| { &m.phone },
                    |m: &mut Invoice| { &mut m.phone },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "email",
                    |m: &Invoice| { &m.email },
                    |m: &mut Invoice| { &mut m.email },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "total_price",
                    |m: &Invoice| { &m.total_price },
                    |m: &mut Invoice| { &mut m.total_price },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Invoice>(
                    "Invoice",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Invoice {
        static mut instance: ::protobuf::lazy::Lazy<Invoice> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Invoice,
        };
        unsafe {
            instance.get(Invoice::new)
        }
    }
}

impl ::protobuf::Clear for Invoice {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.bill_to.clear();
        self.company_name.clear();
        self.addres.clear();
        self.phone.clear();
        self.email.clear();
        self.total_price = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Invoice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Invoice {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CreateInvoiceRequest {
    // message fields
    pub invoice: ::protobuf::SingularPtrField<Invoice>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInvoiceRequest {
    fn default() -> &'a CreateInvoiceRequest {
        <CreateInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInvoiceRequest {
    pub fn new() -> CreateInvoiceRequest {
        ::std::default::Default::default()
    }

    // .Invoice invoice = 1;


    pub fn get_invoice(&self) -> &Invoice {
        self.invoice.as_ref().unwrap_or_else(|| Invoice::default_instance())
    }
    pub fn clear_invoice(&mut self) {
        self.invoice.clear();
    }

    pub fn has_invoice(&self) -> bool {
        self.invoice.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invoice(&mut self, v: Invoice) {
        self.invoice = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice(&mut self) -> &mut Invoice {
        if self.invoice.is_none() {
            self.invoice.set_default();
        }
        self.invoice.as_mut().unwrap()
    }

    // Take field
    pub fn take_invoice(&mut self) -> Invoice {
        self.invoice.take().unwrap_or_else(|| Invoice::new())
    }
}

impl ::protobuf::Message for CreateInvoiceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.invoice {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.invoice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.invoice.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.invoice.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInvoiceRequest {
        CreateInvoiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Invoice>>(
                    "invoice",
                    |m: &CreateInvoiceRequest| { &m.invoice },
                    |m: &mut CreateInvoiceRequest| { &mut m.invoice },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateInvoiceRequest>(
                    "CreateInvoiceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateInvoiceRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateInvoiceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateInvoiceRequest,
        };
        unsafe {
            instance.get(CreateInvoiceRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateInvoiceRequest {
    fn clear(&mut self) {
        self.invoice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInvoiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CreateInvoiceReply {
    // message fields
    pub invoice_number: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInvoiceReply {
    fn default() -> &'a CreateInvoiceReply {
        <CreateInvoiceReply as ::protobuf::Message>::default_instance()
    }
}

impl CreateInvoiceReply {
    pub fn new() -> CreateInvoiceReply {
        ::std::default::Default::default()
    }

    // string invoice_number = 1;


    pub fn get_invoice_number(&self) -> &str {
        &self.invoice_number
    }
    pub fn clear_invoice_number(&mut self) {
        self.invoice_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice_number(&mut self, v: ::std::string::String) {
        self.invoice_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice_number(&mut self) -> &mut ::std::string::String {
        &mut self.invoice_number
    }

    // Take field
    pub fn take_invoice_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoice_number, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateInvoiceReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoice_number)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.invoice_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice_number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.invoice_number.is_empty() {
            os.write_string(1, &self.invoice_number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInvoiceReply {
        CreateInvoiceReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invoice_number",
                    |m: &CreateInvoiceReply| { &m.invoice_number },
                    |m: &mut CreateInvoiceReply| { &mut m.invoice_number },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateInvoiceReply>(
                    "CreateInvoiceReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateInvoiceReply {
        static mut instance: ::protobuf::lazy::Lazy<CreateInvoiceReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateInvoiceReply,
        };
        unsafe {
            instance.get(CreateInvoiceReply::new)
        }
    }
}

impl ::protobuf::Clear for CreateInvoiceReply {
    fn clear(&mut self) {
        self.invoice_number.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInvoiceReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInvoiceReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ListInvoiceRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInvoiceRequest {
    fn default() -> &'a ListInvoiceRequest {
        <ListInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInvoiceRequest {
    pub fn new() -> ListInvoiceRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ListInvoiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInvoiceRequest {
        ListInvoiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ListInvoiceRequest>(
                    "ListInvoiceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListInvoiceRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListInvoiceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListInvoiceRequest,
        };
        unsafe {
            instance.get(ListInvoiceRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListInvoiceRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInvoiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ListInvoiceReply {
    // message fields
    pub invoice_numbers: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInvoiceReply {
    fn default() -> &'a ListInvoiceReply {
        <ListInvoiceReply as ::protobuf::Message>::default_instance()
    }
}

impl ListInvoiceReply {
    pub fn new() -> ListInvoiceReply {
        ::std::default::Default::default()
    }

    // repeated string invoice_numbers = 1;


    pub fn get_invoice_numbers(&self) -> &[::std::string::String] {
        &self.invoice_numbers
    }
    pub fn clear_invoice_numbers(&mut self) {
        self.invoice_numbers.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice_numbers(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.invoice_numbers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_invoice_numbers(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.invoice_numbers
    }

    // Take field
    pub fn take_invoice_numbers(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.invoice_numbers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListInvoiceReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.invoice_numbers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.invoice_numbers {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.invoice_numbers {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInvoiceReply {
        ListInvoiceReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invoice_numbers",
                    |m: &ListInvoiceReply| { &m.invoice_numbers },
                    |m: &mut ListInvoiceReply| { &mut m.invoice_numbers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListInvoiceReply>(
                    "ListInvoiceReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListInvoiceReply {
        static mut instance: ::protobuf::lazy::Lazy<ListInvoiceReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListInvoiceReply,
        };
        unsafe {
            instance.get(ListInvoiceReply::new)
        }
    }
}

impl ::protobuf::Clear for ListInvoiceReply {
    fn clear(&mut self) {
        self.invoice_numbers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInvoiceReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInvoiceReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RemoveInvoiceRequest {
    // message fields
    pub invoice_number: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveInvoiceRequest {
    fn default() -> &'a RemoveInvoiceRequest {
        <RemoveInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveInvoiceRequest {
    pub fn new() -> RemoveInvoiceRequest {
        ::std::default::Default::default()
    }

    // string invoice_number = 1;


    pub fn get_invoice_number(&self) -> &str {
        &self.invoice_number
    }
    pub fn clear_invoice_number(&mut self) {
        self.invoice_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice_number(&mut self, v: ::std::string::String) {
        self.invoice_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice_number(&mut self) -> &mut ::std::string::String {
        &mut self.invoice_number
    }

    // Take field
    pub fn take_invoice_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoice_number, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RemoveInvoiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoice_number)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.invoice_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice_number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.invoice_number.is_empty() {
            os.write_string(1, &self.invoice_number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveInvoiceRequest {
        RemoveInvoiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invoice_number",
                    |m: &RemoveInvoiceRequest| { &m.invoice_number },
                    |m: &mut RemoveInvoiceRequest| { &mut m.invoice_number },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoveInvoiceRequest>(
                    "RemoveInvoiceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoveInvoiceRequest {
        static mut instance: ::protobuf::lazy::Lazy<RemoveInvoiceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoveInvoiceRequest,
        };
        unsafe {
            instance.get(RemoveInvoiceRequest::new)
        }
    }
}

impl ::protobuf::Clear for RemoveInvoiceRequest {
    fn clear(&mut self) {
        self.invoice_number.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveInvoiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RemoveInvoiceReply {
    // message fields
    pub invoice_number: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveInvoiceReply {
    fn default() -> &'a RemoveInvoiceReply {
        <RemoveInvoiceReply as ::protobuf::Message>::default_instance()
    }
}

impl RemoveInvoiceReply {
    pub fn new() -> RemoveInvoiceReply {
        ::std::default::Default::default()
    }

    // string invoice_number = 1;


    pub fn get_invoice_number(&self) -> &str {
        &self.invoice_number
    }
    pub fn clear_invoice_number(&mut self) {
        self.invoice_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice_number(&mut self, v: ::std::string::String) {
        self.invoice_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice_number(&mut self) -> &mut ::std::string::String {
        &mut self.invoice_number
    }

    // Take field
    pub fn take_invoice_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoice_number, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RemoveInvoiceReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoice_number)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.invoice_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice_number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.invoice_number.is_empty() {
            os.write_string(1, &self.invoice_number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveInvoiceReply {
        RemoveInvoiceReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "invoice_number",
                    |m: &RemoveInvoiceReply| { &m.invoice_number },
                    |m: &mut RemoveInvoiceReply| { &mut m.invoice_number },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoveInvoiceReply>(
                    "RemoveInvoiceReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoveInvoiceReply {
        static mut instance: ::protobuf::lazy::Lazy<RemoveInvoiceReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoveInvoiceReply,
        };
        unsafe {
            instance.get(RemoveInvoiceReply::new)
        }
    }
}

impl ::protobuf::Clear for RemoveInvoiceReply {
    fn clear(&mut self) {
        self.invoice_number.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveInvoiceReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveInvoiceReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ByCompanyRequest {
    // message fields
    pub company_name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ByCompanyRequest {
    fn default() -> &'a ByCompanyRequest {
        <ByCompanyRequest as ::protobuf::Message>::default_instance()
    }
}

impl ByCompanyRequest {
    pub fn new() -> ByCompanyRequest {
        ::std::default::Default::default()
    }

    // string company_name = 1;


    pub fn get_company_name(&self) -> &str {
        &self.company_name
    }
    pub fn clear_company_name(&mut self) {
        self.company_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_company_name(&mut self, v: ::std::string::String) {
        self.company_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_company_name(&mut self) -> &mut ::std::string::String {
        &mut self.company_name
    }

    // Take field
    pub fn take_company_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.company_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ByCompanyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.company_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.company_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.company_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.company_name.is_empty() {
            os.write_string(1, &self.company_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ByCompanyRequest {
        ByCompanyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "company_name",
                    |m: &ByCompanyRequest| { &m.company_name },
                    |m: &mut ByCompanyRequest| { &mut m.company_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ByCompanyRequest>(
                    "ByCompanyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ByCompanyRequest {
        static mut instance: ::protobuf::lazy::Lazy<ByCompanyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ByCompanyRequest,
        };
        unsafe {
            instance.get(ByCompanyRequest::new)
        }
    }
}

impl ::protobuf::Clear for ByCompanyRequest {
    fn clear(&mut self) {
        self.company_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ByCompanyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ByCompanyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ByCompanyReply {
    // message fields
    pub invoices: ::protobuf::RepeatedField<Invoice>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ByCompanyReply {
    fn default() -> &'a ByCompanyReply {
        <ByCompanyReply as ::protobuf::Message>::default_instance()
    }
}

impl ByCompanyReply {
    pub fn new() -> ByCompanyReply {
        ::std::default::Default::default()
    }

    // repeated .Invoice invoices = 1;


    pub fn get_invoices(&self) -> &[Invoice] {
        &self.invoices
    }
    pub fn clear_invoices(&mut self) {
        self.invoices.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoices(&mut self, v: ::protobuf::RepeatedField<Invoice>) {
        self.invoices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_invoices(&mut self) -> &mut ::protobuf::RepeatedField<Invoice> {
        &mut self.invoices
    }

    // Take field
    pub fn take_invoices(&mut self) -> ::protobuf::RepeatedField<Invoice> {
        ::std::mem::replace(&mut self.invoices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ByCompanyReply {
    fn is_initialized(&self) -> bool {
        for v in &self.invoices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.invoices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.invoices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.invoices {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ByCompanyReply {
        ByCompanyReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Invoice>>(
                    "invoices",
                    |m: &ByCompanyReply| { &m.invoices },
                    |m: &mut ByCompanyReply| { &mut m.invoices },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ByCompanyReply>(
                    "ByCompanyReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ByCompanyReply {
        static mut instance: ::protobuf::lazy::Lazy<ByCompanyReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ByCompanyReply,
        };
        unsafe {
            instance.get(ByCompanyReply::new)
        }
    }
}

impl ::protobuf::Clear for ByCompanyReply {
    fn clear(&mut self) {
        self.invoices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ByCompanyReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ByCompanyReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct DetectDuplicateRequest {
    // message fields
    pub invoice: ::protobuf::SingularPtrField<Invoice>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DetectDuplicateRequest {
    fn default() -> &'a DetectDuplicateRequest {
        <DetectDuplicateRequest as ::protobuf::Message>::default_instance()
    }
}

impl DetectDuplicateRequest {
    pub fn new() -> DetectDuplicateRequest {
        ::std::default::Default::default()
    }

    // .Invoice invoice = 1;


    pub fn get_invoice(&self) -> &Invoice {
        self.invoice.as_ref().unwrap_or_else(|| Invoice::default_instance())
    }
    pub fn clear_invoice(&mut self) {
        self.invoice.clear();
    }

    pub fn has_invoice(&self) -> bool {
        self.invoice.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invoice(&mut self, v: Invoice) {
        self.invoice = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice(&mut self) -> &mut Invoice {
        if self.invoice.is_none() {
            self.invoice.set_default();
        }
        self.invoice.as_mut().unwrap()
    }

    // Take field
    pub fn take_invoice(&mut self) -> Invoice {
        self.invoice.take().unwrap_or_else(|| Invoice::new())
    }
}

impl ::protobuf::Message for DetectDuplicateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.invoice {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.invoice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.invoice.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.invoice.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DetectDuplicateRequest {
        DetectDuplicateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Invoice>>(
                    "invoice",
                    |m: &DetectDuplicateRequest| { &m.invoice },
                    |m: &mut DetectDuplicateRequest| { &mut m.invoice },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DetectDuplicateRequest>(
                    "DetectDuplicateRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DetectDuplicateRequest {
        static mut instance: ::protobuf::lazy::Lazy<DetectDuplicateRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DetectDuplicateRequest,
        };
        unsafe {
            instance.get(DetectDuplicateRequest::new)
        }
    }
}

impl ::protobuf::Clear for DetectDuplicateRequest {
    fn clear(&mut self) {
        self.invoice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DetectDuplicateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetectDuplicateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct DetectDuplicateReply {
    // message fields
    pub result: DetectDuplicateReply_Result,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DetectDuplicateReply {
    fn default() -> &'a DetectDuplicateReply {
        <DetectDuplicateReply as ::protobuf::Message>::default_instance()
    }
}

impl DetectDuplicateReply {
    pub fn new() -> DetectDuplicateReply {
        ::std::default::Default::default()
    }

    // .DetectDuplicateReply.Result result = 1;


    pub fn get_result(&self) -> DetectDuplicateReply_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = DetectDuplicateReply_Result::OK;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: DetectDuplicateReply_Result) {
        self.result = v;
    }
}

impl ::protobuf::Message for DetectDuplicateReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != DetectDuplicateReply_Result::OK {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.result != DetectDuplicateReply_Result::OK {
            os.write_enum(1, self.result.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DetectDuplicateReply {
        DetectDuplicateReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DetectDuplicateReply_Result>>(
                    "result",
                    |m: &DetectDuplicateReply| { &m.result },
                    |m: &mut DetectDuplicateReply| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DetectDuplicateReply>(
                    "DetectDuplicateReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DetectDuplicateReply {
        static mut instance: ::protobuf::lazy::Lazy<DetectDuplicateReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DetectDuplicateReply,
        };
        unsafe {
            instance.get(DetectDuplicateReply::new)
        }
    }
}

impl ::protobuf::Clear for DetectDuplicateReply {
    fn clear(&mut self) {
        self.result = DetectDuplicateReply_Result::OK;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DetectDuplicateReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetectDuplicateReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum DetectDuplicateReply_Result {
    OK = 0,
    DUPLICATE = 1,
}

impl ::protobuf::ProtobufEnum for DetectDuplicateReply_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DetectDuplicateReply_Result> {
        match value {
            0 => ::std::option::Option::Some(DetectDuplicateReply_Result::OK),
            1 => ::std::option::Option::Some(DetectDuplicateReply_Result::DUPLICATE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DetectDuplicateReply_Result] = &[
            DetectDuplicateReply_Result::OK,
            DetectDuplicateReply_Result::DUPLICATE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("DetectDuplicateReply_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for DetectDuplicateReply_Result {
}

impl ::std::default::Default for DetectDuplicateReply_Result {
    fn default() -> Self {
        DetectDuplicateReply_Result::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for DetectDuplicateReply_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RatingRequest {
    // message fields
    pub company_name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RatingRequest {
    fn default() -> &'a RatingRequest {
        <RatingRequest as ::protobuf::Message>::default_instance()
    }
}

impl RatingRequest {
    pub fn new() -> RatingRequest {
        ::std::default::Default::default()
    }

    // string company_name = 1;


    pub fn get_company_name(&self) -> &str {
        &self.company_name
    }
    pub fn clear_company_name(&mut self) {
        self.company_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_company_name(&mut self, v: ::std::string::String) {
        self.company_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_company_name(&mut self) -> &mut ::std::string::String {
        &mut self.company_name
    }

    // Take field
    pub fn take_company_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.company_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RatingRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.company_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.company_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.company_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.company_name.is_empty() {
            os.write_string(1, &self.company_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RatingRequest {
        RatingRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "company_name",
                    |m: &RatingRequest| { &m.company_name },
                    |m: &mut RatingRequest| { &mut m.company_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RatingRequest>(
                    "RatingRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RatingRequest {
        static mut instance: ::protobuf::lazy::Lazy<RatingRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RatingRequest,
        };
        unsafe {
            instance.get(RatingRequest::new)
        }
    }
}

impl ::protobuf::Clear for RatingRequest {
    fn clear(&mut self) {
        self.company_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RatingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RatingRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RatingReply {
    // message fields
    pub bill_amount: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RatingReply {
    fn default() -> &'a RatingReply {
        <RatingReply as ::protobuf::Message>::default_instance()
    }
}

impl RatingReply {
    pub fn new() -> RatingReply {
        ::std::default::Default::default()
    }

    // double bill_amount = 1;


    pub fn get_bill_amount(&self) -> f64 {
        self.bill_amount
    }
    pub fn clear_bill_amount(&mut self) {
        self.bill_amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bill_amount(&mut self, v: f64) {
        self.bill_amount = v;
    }
}

impl ::protobuf::Message for RatingReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bill_amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.bill_amount != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.bill_amount != 0. {
            os.write_double(1, self.bill_amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RatingReply {
        RatingReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bill_amount",
                    |m: &RatingReply| { &m.bill_amount },
                    |m: &mut RatingReply| { &mut m.bill_amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RatingReply>(
                    "RatingReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RatingReply {
        static mut instance: ::protobuf::lazy::Lazy<RatingReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RatingReply,
        };
        unsafe {
            instance.get(RatingReply::new)
        }
    }
}

impl ::protobuf::Clear for RatingReply {
    fn clear(&mut self) {
        self.bill_amount = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RatingReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RatingReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rinvoice.proto\"G\n\x07Address\x12\x12\n\x04city\x18\x01\x20\x01(\tR\
    \x04city\x12\x16\n\x06street\x18\x02\x20\x01(\tR\x06street\x12\x10\n\x03\
    zip\x18\x03\x20\x01(\tR\x03zip\"\xdc\x01\n\x07Invoice\x12\x1c\n\ttimesta\
    mp\x18\x01\x20\x01(\tR\ttimestamp\x12!\n\x07bill_to\x18\x02\x20\x01(\x0b\
    2\x08.AddressR\x06billTo\x12!\n\x0ccompany_name\x18\x03\x20\x01(\tR\x0bc\
    ompanyName\x12\x20\n\x06addres\x18\x04\x20\x01(\x0b2\x08.AddressR\x06add\
    res\x12\x14\n\x05phone\x18\x05\x20\x01(\tR\x05phone\x12\x14\n\x05email\
    \x18\x06\x20\x01(\tR\x05email\x12\x1f\n\x0btotal_price\x18\x07\x20\x01(\
    \x01R\ntotalPrice\":\n\x14CreateInvoiceRequest\x12\"\n\x07invoice\x18\
    \x01\x20\x01(\x0b2\x08.InvoiceR\x07invoice\";\n\x12CreateInvoiceReply\
    \x12%\n\x0einvoice_number\x18\x01\x20\x01(\tR\rinvoiceNumber\"\x14\n\x12\
    ListInvoiceRequest\";\n\x10ListInvoiceReply\x12'\n\x0finvoice_numbers\
    \x18\x01\x20\x03(\tR\x0einvoiceNumbers\"=\n\x14RemoveInvoiceRequest\x12%\
    \n\x0einvoice_number\x18\x01\x20\x01(\tR\rinvoiceNumber\";\n\x12RemoveIn\
    voiceReply\x12%\n\x0einvoice_number\x18\x01\x20\x01(\tR\rinvoiceNumber\"\
    5\n\x10ByCompanyRequest\x12!\n\x0ccompany_name\x18\x01\x20\x01(\tR\x0bco\
    mpanyName\"6\n\x0eByCompanyReply\x12$\n\x08invoices\x18\x01\x20\x03(\x0b\
    2\x08.InvoiceR\x08invoices\"<\n\x16DetectDuplicateRequest\x12\"\n\x07inv\
    oice\x18\x01\x20\x01(\x0b2\x08.InvoiceR\x07invoice\"m\n\x14DetectDuplica\
    teReply\x124\n\x06result\x18\x01\x20\x01(\x0e2\x1c.DetectDuplicateReply.\
    ResultR\x06result\"\x1f\n\x06Result\x12\x06\n\x02OK\x10\0\x12\r\n\tDUPLI\
    CATE\x10\x01\"2\n\rRatingRequest\x12!\n\x0ccompany_name\x18\x01\x20\x01(\
    \tR\x0bcompanyName\".\n\x0bRatingReply\x12\x1f\n\x0bbill_amount\x18\x01\
    \x20\x01(\x01R\nbillAmount2\xdf\x01\n\x08Invoices\x126\n\x06Create\x12\
    \x15.CreateInvoiceRequest\x1a\x13.CreateInvoiceReply\"\0\x120\n\x04List\
    \x12\x13.ListInvoiceRequest\x1a\x11.ListInvoiceReply\"\0\x126\n\x06Remov\
    e\x12\x15.RemoveInvoiceRequest\x1a\x13.RemoveInvoiceReply\"\0\x121\n\tBy\
    Company\x12\x11.ByCompanyRequest\x1a\x0f.ByCompanyReply\"\02O\n\x08Analy\
    sis\x12C\n\x0fDetectDuplicate\x12\x17.DetectDuplicateRequest\x1a\x15.Det\
    ectDuplicateReply\"\028\n\x06Rating\x12.\n\x0cGenerateBill\x12\x0e.Ratin\
    gRequest\x1a\x0c.RatingReply\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
